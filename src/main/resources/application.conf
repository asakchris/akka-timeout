akka {
  ## Note that the loglevel is again filtered in the log4.properties
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 15s

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  #log-config-on-start = on
  actor {
    provider = "cluster"
    deployment {
      "/EventDetailActor/event-detail-router" {
        router = round-robin-group
        routees.paths = ["/user/event-detail-workers/edw1", "/user/event-detail-workers/edw2", "/user/event-detail-workers/edw3"]
        cluster {
          enabled = on
          allow-local-routees = on
          use-role = parent
        }
      }
      "/event-index-router" {
        router = round-robin-group
        routees.paths = ["/user/event-index-workers/w1", "/user/event-index-workers/w2", "/user/event-index-workers/w3", "/user/event-index-workers/w4", "/user/event-index-workers/w5",
                         "/user/event-index-workers/w6", "/user/event-index-workers/w7", "/user/event-index-workers/w8", "/user/event-index-workers/w9", "/user/event-index-workers/w10"]
        cluster {
          enabled = on
          allow-local-routees = on
          use-role = parent
        }
      }
    }
  }
  remote {
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = "127.0.0.1"
      canonical.hostname = ${?HTTP_BIND_ADDRESS}
      canonical.port = 2551
      canonical.port = ${?CLUSTER_PORT}
    }
  }
  cluster {
    seed-nodes = [
      "akka://event-processor@127.0.0.1:2551"
      #,"akka://event-processor@127.0.0.1:2552"
    ]
    roles = [parent]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    auto-down-unreachable-after = 30s
  }
}

# Enable metrics extension in akka-cluster-metrics.
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native

akka.management {
  http {
    hostname = "127.0.0.1"
    hostname = ${?HTTP_BIND_ADDRESS}
    port = 8558
    port = ${?HTTP_PORT}
    route-providers += "akka.management.HealthCheckRoutes"
  }
  health-checks {
    readiness-path = "health/ready"
    liveness-path = "health/alive"
  }
  cluster {
    health-check {
      # Ready health check returns 200 when cluster membership is in the following states.
      # Intended to be used to indicate this node is ready for user traffic so Up/WeaklyUp
      # Valid values: "Joining", "WeaklyUp", "Up", "Leaving", "Exiting", "Down", "Removed"
      ready-states = ["Up", "WeaklyUp"]
    }
  }
}

event {
  noOfWorkers {
    eventDetail = 3
    eventIndex = 10
  }
  timeout-sec {
    # Index data stream timeout in seconds
    event-index-worker = 5
    # Event index worker timeout, this should be more than event-index-worker
    event-index-coordinator = 10
  }
}
