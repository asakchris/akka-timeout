main-dispatcher1 {
  # Must be one of the following
  # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
  # MessageDispatcherConfigurator with a public constructor with
  # both com.typesafe.config.Config parameter and
  # akka.dispatch.DispatcherPrerequisites parameters.
  # PinnedDispatcher must be used together with executor=thread-pool-executor.
  type = "Dispatcher"
  # Which kind of ExecutorService to use for this dispatcher
  # Valid options:
  #  - "default-executor" requires a "default-executor" section
  #  - "fork-join-executor" requires a "fork-join-executor" section
  #  - "thread-pool-executor" requires a "thread-pool-executor" section
  #  - A FQCN of a class extending ExecutorServiceConfigurator
  executor = "default-executor"
  # This will be used if you have set "executor = "default-executor"".
  # If an ActorSystem is created with a given ExecutionContext, this
  # ExecutionContext will be used as the default executor for all
  # dispatchers in the ActorSystem configured with
  # executor = "default-executor". Note that "default-executor"
  # is the default value for executor, and therefore used if not
  # specified otherwise. If no ExecutionContext is given,
  # the executor configured in "fallback" will be used.
  default-executor {
    fallback = "fork-join-executor"
  }
  # This will be used if you have set "executor = "fork-join-executor""
  # Underlying thread pool implementation is akka.dispatch.forkjoin.ForkJoinPool
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 8
    # The parallelism factor is used to determine thread pool size using the
    # following formula: ceil(available processors * factor). Resulting size
    # is then bounded by the parallelism-min and parallelism-max values.
    parallelism-factor = 3.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 64
    # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack
    # like peeking mode which "pop".
    task-peeking-mode = "FIFO"
  }
  # How long time the dispatcher will wait for new actors until it shuts down
  shutdown-timeout = 1s
  # Throughput defines the number of messages that are processed in a batch
  # before the thread is returned to the pool. Set to 1 for as fair as possible.
  throughput = 5
  # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
  throughput-deadline-time = 0ms
  # For BalancingDispatcher: If the balancing dispatcher should attempt to
  # schedule idle actors using the same dispatcher when a message comes in,
  # and the dispatchers ExecutorService is not fully busy already.
  attempt-teamwork = on
  # If this dispatcher requires a specific type of mailbox, specify the
  # fully-qualified class name here; the actually created mailbox will
  # be a subtype of this type. The empty string signifies no requirement.
  mailbox-requirement = ""
}

akka {
  ## Note that the loglevel is again filtered in the log4.properties
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  logger-startup-timeout = 15s

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  #log-config-on-start = on
  actor {
    provider = "cluster"
    deployment {
      "/EventDetailActor/event-detail-router" {
        router = round-robin-group
        routees.paths = ["/user/event-detail-workers/edw1", "/user/event-detail-workers/edw2", "/user/event-detail-workers/edw3"]
        cluster {
          enabled = on
          allow-local-routees = on
          use-role = parent
        }
      }
      "/event-index-router" {
        router = round-robin-group
        routees.paths = ["/user/event-index-workers/w1", "/user/event-index-workers/w2", "/user/event-index-workers/w3", "/user/event-index-workers/w4", "/user/event-index-workers/w5",
                         "/user/event-index-workers/w6", "/user/event-index-workers/w7", "/user/event-index-workers/w8", "/user/event-index-workers/w9", "/user/event-index-workers/w10"]
        cluster {
          enabled = on
          allow-local-routees = on
          use-role = parent
        }
      }
    }
  }
  remote {
    artery {
      enabled = on
      transport = tcp
      canonical.hostname = "127.0.0.1"
      canonical.hostname = ${?HTTP_BIND_ADDRESS}
      canonical.port = 2551
      canonical.port = ${?CLUSTER_PORT}
    }
  }
  cluster {
    seed-nodes = [
      "akka://event-processor@127.0.0.1:2551"
      #,"akka://event-processor@127.0.0.1:2552"
    ]
    roles = [parent]

    # auto downing is NOT safe for production deployments.
    # you may want to use it during development, read more about it in the docs.
    auto-down-unreachable-after = 30s
  }
}

# Enable metrics extension in akka-cluster-metrics.
akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]

# Sigar native library extract location during tests.
# Note: use per-jvm-instance folder when running multiple jvm on one host.
akka.cluster.metrics.native-library-extract-folder=${user.dir}/target/native

akka.management {
  http {
    hostname = "127.0.0.1"
    hostname = ${?HTTP_BIND_ADDRESS}
    port = 8558
    port = ${?HTTP_PORT}
    route-providers += "akka.management.HealthCheckRoutes"
  }
  health-checks {
    readiness-path = "health/ready"
    liveness-path = "health/alive"
  }
  cluster {
    health-check {
      # Ready health check returns 200 when cluster membership is in the following states.
      # Intended to be used to indicate this node is ready for user traffic so Up/WeaklyUp
      # Valid values: "Joining", "WeaklyUp", "Up", "Leaving", "Exiting", "Down", "Removed"
      ready-states = ["Up", "WeaklyUp"]
    }
  }
}

event {
  noOfWorkers {
    eventDetail = 3
    eventIndex = 10
  }
}
